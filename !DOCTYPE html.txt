<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Study Resource Hub</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto">
  <style>
    :root {
      --bg: #ffffff;
      --text: #111111;
      --primary: #005792;
    }

    body.dark {
      --bg: #121212;
      --text: #ffffff;
      --primary: #4fc3f7;
    }

    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      background: var(--bg);
      color: var(--text);
    }

    header, footer {
      background: var(--primary);
      color: white;
      text-align: center;
      padding: 1em;
    }

    nav {
      text-align: center;
      margin: 10px 0;
    }

    nav input, nav select {
      margin: 5px;
      padding: 5px;
    }

    main {
      padding: 20px;
      max-width: 800px;
      margin: auto;
    }

    section {
      margin: 30px 0;
    }

    ul {
      padding: 0;
      list-style: none;
    }

    li {
      margin: 10px 0;
    }

    button {
      padding: 10px;
      margin: 5px;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: 5px;
    }

    input[type="file"] {
      display: block;
      margin-top: 10px;
    }

    @media (max-width: 600px) {
      header, nav, main, footer {
        padding: 10px;
      }
    }
  </style>
</head>
<body>
  <header>
    <h1>Study Resource Hub</h1>
    <p>Access notes, videos, quizzes & more</p>
    <button onclick="toggleDarkMode()">Toggle Dark Mode</button>
    <button onclick="logout()" id="logoutBtn" style="display:none">Logout</button>
  </header>

  <nav>
    <input type="text" id="searchInput" placeholder="Search resources..." oninput="filterResources()" />
    <select id="categoryFilter" onchange="filterResources()">
      <option value="all">All</option>
      <option value="math">Math</option>
      <option value="science">Science</option>
    </select>
  </nav>

  <main>
    <section id="auth">
      <button onclick="login()" id="loginBtn">Login with Google</button>
    </section>

    <section id="uploadSection" style="display:none">
      <h2>Upload Notes (PDF)</h2>
      <input type="file" id="noteFile" />
      <button onclick="uploadNote()">Upload</button>
      <p id="uploadStatus"></p>
    </section>

    <section>
      <h2>Available Notes</h2>
      <ul id="notesList">
        <li data-category="math">ðŸ“„ <a href="#">Math Notes</a></li>
        <li data-category="science">ðŸ“„ <a href="#">Science Notes</a></li>
      </ul>
    </section>
  </main>

  <footer>
    <p>&copy; 2025 Jatin's Study Hub</p>
  </footer>

  <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-storage-compat.js"></script>
  <script>
    // === Your Firebase Config ===
    const firebaseConfig = {
      apiKey: "YOUR_API_KEY",
      authDomain: "YOUR_PROJECT.firebaseapp.com",
      projectId: "YOUR_PROJECT_ID",
      storageBucket: "YOUR_PROJECT.appspot.com",
      messagingSenderId: "YOUR_SENDER_ID",
      appId: "YOUR_APP_ID"
    };
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const storage = firebase.storage();

    function login() {
      const provider = new firebase.auth.GoogleAuthProvider();
      auth.signInWithPopup(provider).then(() => {
        document.getElementById('auth').style.display = 'none';
        document.getElementById('uploadSection').style.display = 'block';
        document.getElementById('logoutBtn').style.display = 'inline-block';
      });
    }

    function logout() {
      auth.signOut().then(() => location.reload());
    }

    function uploadNote() {
      const file = document.getElementById('noteFile').files[0];
      if (!file) return;
      const storageRef = storage.ref('notes/' + file.name);
      storageRef.put(file).then(snapshot => {
        document.getElementById('uploadStatus').innerText = 'Uploaded successfully!';
      });
    }

    function filterResources() {
      const search = document.getElementById('searchInput').value.toLowerCase();
      const category = document.getElementById('categoryFilter').value;
      document.querySelectorAll('#notesList li').forEach(li => {
        const text = li.innerText.toLowerCase();
        const matchesSearch = text.includes(search);
        const matchesCategory = category === 'all' || li.dataset.category === category;
        li.style.display = (matchesSearch && matchesCategory) ? 'list-item' : 'none';
      });
    }

    function toggleDarkMode() {
      document.body.classList.toggle('dark');
    }

    auth.onAuthStateChanged(user => {
      if (user) {
        document.getElementById('auth').style.display = 'none';
        document.getElementById('uploadSection').style.display = 'block';
        document.getElementById('logoutBtn').style.display = 'inline-block';
      }
    });
  </script>
</body>
</html>
